==117929== Memcheck, a memory error detector
==117929== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==117929== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==117929== Command: ./ex17 db.dat l
==117929== 
==117929== Invalid read of size 4
==117929==    at 0x109963: Database_list (ex17.c:144)
==117929==    by 0x109B23: main (ex17.c:189)
==117929==  Address 0x4 is not stack'd, malloc'd or (recently) free'd
==117929== 
==117929== 
==117929== Process terminating with default action of signal 11 (SIGSEGV)
==117929==  Access not within mapped region at address 0x4
==117929==    at 0x109963: Database_list (ex17.c:144)
==117929==    by 0x109B23: main (ex17.c:189)
==117929==  If you believe this happened as a result of a stack
==117929==  overflow in your program's main thread (unlikely but
==117929==  possible), you can try to increase the size of the
==117929==  main thread stack using the --main-stacksize= flag.
==117929==  The main thread stack size used in this run was 8388608.
==117929== 
==117929== HEAP SUMMARY:
==117929==     in use at exit: 4,592 bytes in 4 blocks
==117929==   total heap usage: 4 allocs, 0 frees, 4,592 bytes allocated
==117929== 
==117929== LEAK SUMMARY:
==117929==    definitely lost: 0 bytes in 0 blocks
==117929==    indirectly lost: 0 bytes in 0 blocks
==117929==      possibly lost: 0 bytes in 0 blocks
==117929==    still reachable: 4,592 bytes in 4 blocks
==117929==         suppressed: 0 bytes in 0 blocks
==117929== Rerun with --leak-check=full to see details of leaked memory
==117929== 
==117929== For lists of detected and suppressed errors, rerun with: -s
==117929== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
